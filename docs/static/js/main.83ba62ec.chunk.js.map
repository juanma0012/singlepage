{"version":3,"sources":["components/GreetingList/actions.js","components/GreetingList/actionTypes.js","components/PeopleForm/PeopleForm.js","components/PeopleForm/actions.js","components/PeopleForm/actionTypes.js","components/LanguageDropdown/LanguageDropdown.js","components/LanguageDropdown/actions.js","components/LanguageDropdown/actionTypes.js","components/GreetingList/GreetingItem.js","components/GreetingList/GreetingList.js","App.js","serviceWorker.js","shared/utility.js","components/PeopleForm/reducer.js","components/LanguageDropdown/reducer.js","components/GreetingList/reducer.js","reducer.js","index.js"],"names":["polyglotMaster","english","people","map","person","concat","spanish","french","portuguese","italian","setGreetings","language","type","greetings","connect","dispatch","onSetPeople","peopleString","getState","split","filter","item","trim","languageDropdown","greetingActions","_ref","react_default","a","createElement","className","value","onChange","e","target","onSetLanguage","peopleForm","languagesList","i","key","charAt","toUpperCase","slice","select","Greeting","text","state","greetingList","greetingAllPeople","greeting","GreetingItem","App","components_PeopleForm_PeopleForm","components_LanguageDropdown_LanguageDropdown","components_GreetingList_GreetingList","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","updateObject","oldObject","updatedProperties","Object","objectSpread","resolveEach","defineProperty","action","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.83ba62ec.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\nconst polyglotMaster = {\n    english: (people) => people.map(person => {\n        return `Hello, nice to meet you ${person}, welcome!`;\n    }),\n    spanish: (people) => people.map(person => {\n        return `Hola, mucho gusto ${person}, bienvenido!`;\n    }),\n    french: (people) => people.map(person => {\n        return `Bonjour, ravi de vous rencontrer ${person}, bienvenue!`;\n    }),\n    portuguese: (people) => people.map(person => {\n        return `Olá, prazer em conhecê-lo ${person}, seja bem-vindo!`;\n    }),\n    italian: (people) => people.map(person => {\n        return `Ciao, piacere di conoscerti ${person}, benvenuto!`;\n    })\n};\nexport const setGreetings = (people, language) => {\n    let greetings = polyglotMaster[language](people);\n    return { type: actionTypes.SET_GREETINGS, greetings };\n};\n","export const SET_GREETINGS = 'greetingList/SET_GREETINGS';\n","import { connect } from 'react-redux';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as actions from './actions';\nimport './PeopleForm.css';\n\nconst PeopleForm = ({ onSetPeople }) => {\n    let value;\n    const onChange = e => {\n        onSetPeople(e.target.value);\n    }\n    return (\n        <div className=\"PeopleForm\">\n            <textarea value={value} onChange={onChange}></textarea>\n        </div>\n    )\n};\n\nPeopleForm.propTypes = {\n    onSetPeople: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    onSetPeople: (people) => dispatch(actions.setPeople(people))\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(PeopleForm);\n","import * as actionTypes from './actionTypes';\nimport * as greetingActions from '../GreetingList/actions';\n\nexport const setPeople = (peopleString) => {\n    return (dispatch, getState) => {\n        let people = peopleString.split('\\n').filter(item => item.trim() !== '');\n        dispatch({ type: actionTypes.SET_PEOPLE, people });\n        let state = getState();\n        let language = state.languageDropdown.language;\n        dispatch(greetingActions.setGreetings(people, language));\n    }\n};\n","export const SET_PEOPLE = 'peopleForm/SET_PEOPLE';\n","import { connect } from 'react-redux'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport * as actions from './actions'\nimport './LanguageDropdown.css';\n\nconst LanguageDropdown = ({ onSetLanguage }) => {\n    let select;\n    const languages = ['english', 'spanish', 'french', 'portuguese', 'italian'];\n    const languagesList = languages.map((language, i) => (\n        <option value={language} key={i}>{language.charAt(0).toUpperCase() + language.slice(1)}</option>\n    ));\n    const onChangeLanguage = e => {\n        onSetLanguage(e.target.value);\n    };\n    return (\n        <div className=\"LanguageDropdown\">\n            <select value={select} onChange={onChangeLanguage}>\n                {languagesList}\n            </select>\n        </div>\n    )\n};\n\nLanguageDropdown.propTypes = {\n    onSetLanguage: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    onSetLanguage: (people) => dispatch(actions.setLanguage(people))\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(LanguageDropdown);\n","import * as actionTypes from './actionTypes';\nimport * as greetingActions from '../GreetingList/actions';\n\nexport const setLanguage = (language) => {\n    return (dispatch, getState) => {\n        dispatch({ type: actionTypes.SET_LANGUAGE, language });\n        let state = getState();\n        let people = state.peopleForm.people;\n        dispatch(greetingActions.setGreetings(people, language));\n    }\n};\n","export const SET_LANGUAGE = 'languageDropdown/SET_LANGUAGE';\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Greeting = ({ text }) => (\n    <li className=\"Greeting\">{text}</li>\n)\n\nGreeting.propTypes = {\n    text: PropTypes.string.isRequired\n}\n\nexport default Greeting\n","import { connect } from 'react-redux';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport GreetingItem from './GreetingItem';\nimport './GreetingList.css';\n\nconst GreetingList = ({ greetings }) => {\n    const greetingAllPeople = greetings.map((greeting, i) => (\n        <GreetingItem key={i} text={greeting} />\n    ));\n    return (\n        <div className=\"GreetingList\">\n            <ul>\n                {greetingAllPeople}\n            </ul>\n        </div>\n    )\n};\n\nGreetingList.propTypes = {\n    greetings: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    greetings: state.greetingList.greetings\n});\n\nexport default connect(\n    mapStateToProps\n)(GreetingList);\n","import React, { Component } from 'react';\nimport { PeopleForm, GreetingList, LanguageDropdown } from './components';\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>Greeting people</h1>\n                <br></br>\n                <PeopleForm />\n                <br></br>\n                <LanguageDropdown />\n                <br></br>\n                <GreetingList />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    };\n};","import { resolveEach } from 'redux-resolver';\nimport { updateObject } from '../../shared/utility';\nimport * as actionTypes from './actionTypes';\n\nconst initialState = {\n    people: []\n};\n\nconst setPeople = (state, action) => {\n    return updateObject(state, {\n        people: action.people\n    });\n};\n\nexport default resolveEach(initialState, {\n    [actionTypes.SET_PEOPLE]: setPeople\n});\n","import { resolveEach } from 'redux-resolver';\nimport { updateObject } from '../../shared/utility';\nimport * as actionTypes from './actionTypes';\n\nconst initialState = {\n    language: \"english\"\n};\n\nconst setLanguage = (state, action) => {\n    return updateObject(state, {\n        language: action.language\n    });\n};\n\nexport default resolveEach(initialState, {\n    [actionTypes.SET_LANGUAGE]: setLanguage\n});\n","import { resolveEach } from 'redux-resolver'\nimport { updateObject } from '../../shared/utility';\nimport * as actionTypes from './actionTypes';\n\nconst initialState = {\n    greetings: []\n};\n\nconst setGreetings = (state, action) => {\n    return updateObject(state, {\n        greetings: action.greetings\n    });\n};\n\nexport default resolveEach(initialState, {\n    [actionTypes.SET_GREETINGS]: setGreetings\n});\n","import { combineReducers } from 'redux';\nimport peopleForm from './components/PeopleForm/reducer';\nimport languageDropdown from './components/LanguageDropdown/reducer';\nimport greetingList from './components/GreetingList/reducer';\n\nexport default combineReducers({\n    peopleForm,\n    languageDropdown,\n    greetingList\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './reducer'\n\nconst store = createStore(rootReducer,\n    applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}